#!/bin/sh

#fix weird completion-ignore-case case
#[ X"${2}" = X"on" ] && { shift; shift; }
[ X"${1}" = X"-c" ] && { shift; SHUNDLE_ENV_COLOR="1"; }

#required for clean|install at first deployment time
[ -z "${SHUNDLE_HOME}" ] && SHUNDLE_HOME="${HOME}/.shundle"

#non interactive git
GIT_TERMINAL_PROMPT=0; export GIT_TERMINAL_PROMPT

if [ X"${SHUNDLE_ENV_COLOR}" = X"1" ]; then
    _BIN_SHUNDLE_ENV_RED='\033[1;31m'
    _BIN_SHUNDLE_ENV_BLUE='\033[1;34m'
    _BIN_SHUNDLE_ENV_GREEN='\033[32;02m'
    _BIN_SHUNDLE_ENV_NORMAL='\033[1;00m'
    _BIN_SHUNDLE_ENV_YELLOW='\033[1;33m'
fi

_usage()
{
    printf "%s\\n" "Usage: shundle [-c] OPTION [ARGS]"
    printf "\\n"
    printf "%s\\n" "  -c                colorize output"
    printf "\\n"
    printf "%s\\n" "  install [plugin]  install new plugin"
    printf "%s\\n" "  remove  [plugin]  delete plugin"
    printf "%s\\n" "  search  [pattern] look up at github available scripts by name"
    printf "%s\\n" "  update            update configured plugins"
    printf "%s\\n" "  clean             clean up unused scripts"
    printf "%s\\n" "  list              list available plugins"
    return 1
}

_false()
{
    return 1
}

_whereis()
{
    [ -z "${1}" ] && return 1
    if ! command -v "${1}" 2>/dev/null; then
        return 1
    fi
}

_die()
{
    printf "%s\\n" "${*}"
    exit 1
}

_shundle_aux_loaded()
{
    if [ -z "${1}" ] || [ -z "${2}" ]; then
        return 1
    else
        _shundle_aux_loaded__l="${1}"
        while [ "${_shundle_aux_loaded__l}" ]; do
            _shundle_aux_loaded__option="${_shundle_aux_loaded__l%%,*}"
            [ X"${2}" = X"${_shundle_aux_loaded__option}" ] && return 0
            [ X"${_shundle_aux_loaded__l}" = X"${_shundle_aux_loaded__option}" ] &&\
                _shundle_aux_loaded__l='' || _shundle_aux_loaded__l="${_shundle_aux_loaded__l#*,}"
        done
        return 1
    fi
}

_shundle_aux_options()
{
    [ -z "${SHUNDLE_OPTIONS}" ] || return 0
    [ -z "${SHUNDLE_RC}" ]      && return 1
    _shundle_aux_options__subset="$(awk '/bundle\/shundle/,0 {if($0~"^.*=[^;&]*" && $1!~"^#") print}' "${SHUNDLE_RC}")"
    for _shundle_aux_options__bundle in $(printf "%s" "${_shundle_aux_options__subset}"|\
    awk '{if($0~"([bB][uU][nN][dD][lL][eE]|[pP][lL][uU][gG][iI][nN])="){sub(/([bB][uU][nN][dD][lL][eE]|[pP][lL][uU][gG][iI][nN])=/,"");gsub(/'\''/,"");gsub(/'\"'/,"");print $1}}'); do #'
        SHUNDLE_OPTIONS="${SHUNDLE_OPTIONS}${_shundle_aux_options__bundle},"
    done
}

_shundle_install()
{
    [ X"${1}" = X"update" ] && { _shundle_install__update="true"; shift; }

    _shundle_install_header()
    {
        [ -z "${_shundle_install_header__init}" ] || return 0 #run only once
        printf "Installing bundles to %s" "${SHUNDLE_HOME}/bundle"
        _shundle_install_header__init="true"
    }

    _shundle_install_aux()
    {
        [ -z "${1}" ] && return 0
        _shundle_install_header
        printf "\\n [+] Bundle '%s' " "${1}"

        _shundle_install__handler="${1%%:*}:"
        _shundle_install__bundle="${1#$_shundle_install__handler}"

        case "${_shundle_install__handler}" in
            ''|*/*) case "${1}" in
                    /*|~*|\$*) _shundle_install_local  "${1}" ;;
                    *)         _shundle_install_github "${1}" ;;
                esac
                ;;
            gh*|github*|git@github.com*) _shundle_install_github "${_shundle_install__bundle}"    ;;
            git*)                        _shundle_install_git    "${_shundle_install__bundle}"    ;;
            file*)                       _shundle_install_local  "${_shundle_install__bundle#//}" ;;
            http*|https*|ftp*)           _shundle_install_web    "${1}"                           ;;
            *) _shundle_install__error="unknown handler: "${_shundle_install__handler}""; _false  ;;
        esac
        #Bundle 'gh:javier-lopez/shundle-plugins/eternalize'
        #Bundle 'github:javier-lopez/shundle-plugins/colorize'
        #Bundle 'git@github.com:javier-lopez/shundle-plugins/aliazator'
        #Bundle 'username/repository'
        #Bundle 'username/repository.git'
        #Bundle 'username/repository:master'
        #Bundle 'username/repository.git:1234567'

        #Bundle 'https://domain.tld/path/awesome-script'
        #Bundle 'http://domain.tld/path/awesome-script'
        #Bundle 'ftp://domain.tld/path/awesome-script'

        #Bundle 'file://~/path/awesome-script'
        #Bundle 'file://$HOME/path/awesome-script'
        #Bundle 'file://home/username/path/awesome-script'
        #Bundle '/home/username/path/awesome-script'
        #Bundle '$HOME/path/awesome-script'

        #TODO 29-07-2014 13:52 >> add debug information on fail
        [ X"${?}" = X"0" ] || { printf "    %s" "failed"; printf "\\n%s" "${_shundle_install__error}"; }
    }

    _shundle_install_github()
    {
        _shundle_install_github__default_protocol="https"
        _shundle_install_github__revision=":${1##*:}"
        _shundle_install_github__bundle="${1%$_shundle_install_github__revision}"

        if [ "${GIT_VERSION}" -lt "230" ]; then #non interactive git
            _shundle_install_github__credentials="git::@"
        fi

        _shundle_install_github__author="${_shundle_install_github__bundle%/*}"
        _shundle_install_github__rep="${_shundle_install_github__bundle#*/}"

        case "${_shundle_install_github__rep}" in
            */*) _shundle_install_github__rep="" ;;
        esac

        _shundle_install__url="${_shundle_install_github__default_protocol}"
        _shundle_install__url="${_shundle_install__url}://${_shundle_install_github__credentials}github.com"
        _shundle_install__url="${_shundle_install__url}/${_shundle_install_github__author}/${_shundle_install_github__rep}"

        _shundle_install_github__bundle="${_shundle_install_github__bundle##*/}"
        _shundle_install_github__bundle="${_shundle_install_github__bundle%.*}"

        if [ -d "${SHUNDLE_HOME}/bundle/${_shundle_install_github__bundle}" ] && [ -z "${_shundle_install__update}" ]; then
            #already installed and without a request for update
            return 0
        else
            if [ -d "${SHUNDLE_HOME}/bundle/${_shundle_install_github__bundle}/.git" ]; then
                if [ X"${_shundle_install_github__revision}" = X":${1}" ]; then
                    _shundle_install__error="$(cd "${SHUNDLE_HOME}/bundle/${_shundle_install_github__bundle}" &&
                     git pull 2>&1 >/dev/null && git submodule update --init --recursive 2>&1 >/dev/null)"
                fi
            else
                if [ X"${_shundle_install_github__revision}" = X":${1}" ]; then
                    _shundle_install__error="$(cd "${SHUNDLE_HOME}"/bundle &&
                    git clone -q --depth=1 "${_shundle_install__url}" "${_shundle_install_github__bundle}" 2>&1 >/dev/null &&
                    cd "${_shundle_install_github__bundle}" && git config core.sparsecheckout true 2>&1 >/dev/null         &&
                    printf "%s" "${_shundle_install_github__bundle}" > .git/info/sparse-checkout &&
                    git read-tree -m -u HEAD 2>&1 >/dev/null)"
                else
                    _shundle_install__error="$(cd "${SHUNDLE_HOME}"/bundle &&
                    git clone -q "${_shundle_install__url}" "${_shundle_install_github__bundle}" 2>&1 >/dev/null &&
                    cd "${_shundle_install_github__bundle}" &&
                    git checkout -q "${_shundle_install_github__revision#:}" 2>&1 >/dev/null &&
                    git config core.sparsecheckout true 2>&1 >/dev/null &&
                    printf "%s" "${_shundle_install_github__bundle}" > .git/info/sparse-checkout &&
                    git read-tree -m -u HEAD 2>&1 >/dev/null)"
                fi
            fi
        fi

        #1.- checkout everything, delete extra data (currently using this method)
        #------------------------------------------------------------------------
        #git clone --dept=1 somerepo somedir
        #cd somedir
        #git config core.sparsecheckout true
        #printf "%s\\n" "test" > .git/info/sparse-checkout
        #git read-tree -m -u HEAD

        #2.- checkout specific directories, for some weird reason it download more stuff this way
        #----------------------------------------------------------------------------------------
        #mkdir plugin1
        #cd plugin1
        #git init
        #git config core.sparseCheckout true
        #echo 'plugin1/' >.git/info/sparse-checkout
        #git remote add -f origin http://url.git
        #git pull origin master

        #3.- checkout everything, delete meta data, it works but makes a sucky update system
        #-----------------------------------------------------------------------------------
        #git clone https://github.com/javier-lopez/t plugin1
        #cd plugin1
        #git filter-branch --prune-empty --subdirectory-filter plugin1 -- --all
        #git reflog expire --expire=now --all
        #git gc --aggressive --prune=now

        #4.- checkout specific directories, delete meta data, it works but makes a sucky update system
        #---------------------------------------------------------------------------------------------
        #mkdir plugin1
        #cd plugin1
        #git init
        #git config core.sparseCheckout true
        #echo 'plugin1/' >.git/info/sparse-checkout
        #git remote add -f https://github.com/javier-lopez/t
        #git pull origin master
        #git filter-branch --prune-empty --subdirectory-filter plugin1 -- --all
        #git reflog expire --expire=now --all
        #git gc --aggressive --prune=now
    }

    _shundle_install_git()
    {
        #mkdir plugin1
        #cd plugin1
        #git init
        #git config core.sparseCheckout true
        #echo 'plugin1/' >.git/info/sparse-checkout
        #git remote add -f origin http://url.git
        #git pull origin master
        printf "%s\\n" "Raw git installation has not been defined"
    }

    _shundle_install_web()
    {
        _shundle_install_web__plugin="${1##*/}"
        _shundle_install_web__plugin="${_shundle_install_web__plugin%.*}"

        if [ -d "${SHUNDLE_HOME}/bundle/${_shundle_install_web__plugin}" ] && [ -z "${_shundle_install__update}" ]; then
            return 0
        else
            if [ -d "${SHUNDLE_HOME}/bundle/${_shundle_install_web__plugin}/bin" ]; then
                _shundle_install__error="$(cd "${SHUNDLE_HOME}/bundle/${_shundle_install_web__plugin}/bin" 2>&1 >/dev/null &&
                mkdir old 2>&1 >/dev/null && mv "${1##*/}" old/ ';' 2>&1 >/dev/null &&
                { ${WGET} "${1}" 2>&1 >/dev/null && rm -rf old/* || { mv old/* . 2>&1 >/dev/null; _false; } })"
            else
                _shundle_install__error="$(cd "${SHUNDLE_HOME}"/bundle 2>&1 >/dev/null &&
                mkdir "${_shundle_install_web__plugin}" 2>&1 >/dev/null     &&
                mkdir "${_shundle_install_web__plugin}/bin" 2>&1 >/dev/null &&
                cd "${_shundle_install_web__plugin}/bin" 2>&1 >/dev/null && ${WGET} "${1}" 2>&1 >/dev/null &&
                chmod +x "${1##*/}" 2>&1 >/dev/null &&
                printf "%s\\n" "# Name:         ${_shundle_install_web__plugin}" > ../"${_shundle_install_web__plugin}" &&
                printf "%s\\n" "# Author:       unknown"        >> ../"${_shundle_install_web__plugin}" &&
                printf "%s\\n" "# Description:  remote script"  >> ../"${_shundle_install_web__plugin}" &&
                printf "%s\\n" "# Licence:      unknown"        >> ../"${_shundle_install_web__plugin}" &&
                printf "%s\\n" "# Source:       ${1}"           >> ../"${_shundle_install_web__plugin}" &&
                printf "%s\\n" "# Version:      0.1"            >> ../"${_shundle_install_web__plugin}" &&
                printf "%s\\n" "# Shell:        $(awk -F"/" '{print $NF; exit}' "${1##*/}")" >> ../"${_shundle_install_web__plugin}" &&
                printf "%s\\n" "# Depends:      none"           >> ../"${_shundle_install_web__plugin}" &&
                printf "\\n%s\\n" "_shundle_expose ${_shundle_install_web__plugin}=\"${SHUNDLE_HOME}/bundle/${_shundle_install_web__plugin}/bin/${1##*/}\"" >> ../"${_shundle_install_web__plugin}" &&
                printf "\\n%s\\n" "# vim: set ts=8 sw=4 tw=0 ft=sh :" >> ../"${_shundle_install_web__plugin}")"
            fi
        fi
    }

    _shundle_install_local()
    {
        _shundle_install_local__plugin="${1##*/}"
        _shundle_install_local__plugin="${_shundle_install_local__plugin%.*}"

        case "${1}" in
            \$*)   _shundle_install_local__orig="$(eval "printf "%s" "${1}"")" ;;
            '~'/*) _shundle_install_local__orig="${HOME}/${1#\~/}" ;;
            *)     _shundle_install_local__orig="/${1}" ;;
        esac

        if [ -d "${SHUNDLE_HOME}/bundle/${_shundle_install_local__plugin}" ] && [ -z "${_shundle_install__update}" ]; then
            return 0
        else
            if [ -d "${SHUNDLE_HOME}/bundle/${_shundle_install_local__plugin}/bin" ]; then
                _shundle_install__error="$(cd "${SHUNDLE_HOME}/bundle/${_shundle_install_local__plugin}/bin" 2>&1 >/dev/null &&
                mkdir old 2>&1 >/dev/null && mv "${1##*/}" old/ ';' 2>&1 >/dev/null &&
                { cp "${_shundle_install_local__orig}" . 2>&1 >/dev/null && rm -rf old/* 2>&1 >/dev/null || { mv old/* . 2>&1 >/dev/null ; _false ; } })"
            else
                _shundle_install__error="$(cd "${SHUNDLE_HOME}"/bundle 2>&1 >/dev/null &&
                mkdir "${_shundle_install_local__plugin}" 2>&1 >/dev/null &&
                mkdir "${_shundle_install_local__plugin}/bin" 2>&1 >/dev/null &&
                cd "${_shundle_install_local__plugin}/bin" 2>&1 >/dev/null &&
                cp "${_shundle_install_local__orig}" . 2>&1 >/dev/null  &&
                chmod +x "${1##*/}" 2>&1 >/dev/null &&
                printf "%s\\n" "# Name:         ${_shundle_install_local__plugin}" > ../"${_shundle_install_local__plugin}" &&
                printf "%s\\n" "# Author:       unknown"        >> ../"${_shundle_install_local__plugin}" &&
                printf "%s\\n" "# Description:  local script" >> ../"${_shundle_install_local__plugin}"   &&
                printf "%s\\n" "# Licence:      unknown"        >> ../"${_shundle_install_local__plugin}" &&
                printf "%s\\n" "# Source:       ${1}"           >> ../"${_shundle_install_local__plugin}" &&
                printf "%s\\n" "# Version:      0.1"            >> ../"${_shundle_install_local__plugin}" &&
                printf "%s\\n" "# Shell:        $(awk -F"/" '{print $NF; exit}' "${1##*/}")" >> ../"${_shundle_install_local__plugin}" &&
                printf "%s\\n" "# Depends:      none"           >> ../"${_shundle_install_local__plugin}" &&
                printf "\\n%s\\n" "_shundle_expose ${_shundle_install_local__plugin}=\"${1}\"" >> ../"${_shundle_install_local__plugin}" &&
                printf "\\n%s\\n" "# vim: set ts=8 sw=4 tw=0 ft=sh :" >> ../"${_shundle_install_local__plugin}")"
            fi
        fi
    }

    if [ -z "${1}" ]; then
        _shundle_aux_options #read Bundle definitions from SHUNDLE_RC and save them to SHUNDLE_OPTIONS
        _shundle_install__array="${SHUNDLE_OPTIONS}"

        while [ "${_shundle_install__array}" ]; do
            _shundle_install__element="${_shundle_install__array%%,*}"
            _shundle_install_aux "${_shundle_install__element}"
            [ X"${_shundle_install__array}" = X"${_shundle_install__element}" ] &&\
                ${_shundle_install__array}='' || _shundle_install__array="${_shundle_install__array#*,}"
        done
    else
        for _shundle_install_param; do
            _shundle_install_aux "${_shundle_install_param}"
        done
    fi
    printf "\\n"

    #TODO 02-10-2013 05:12 >> activate newly added bundles?
}

_shundle_remove()
{
    for _shundle_remove_param; do
        [ X"${_shundle_remove_param}" = X"shundle" ] && _die "shundle: cannot remove myself!"
        if [ -d "${SHUNDLE_HOME}/bundle/${_shundle_remove_param}" ]; then
            printf "%s\\n" "[-] removing ${_shundle_remove_param}"
            rm -rf "${SHUNDLE_HOME}/bundle/${_shundle_remove_param}"
        fi
    done
}

_shundle_search()
{
    printf "%s\\n" "search module has not been defined"
    #TODO 02-10-2013 05:12 >> show description in search results
}

_shundle_update()
{
    _shundle_install update
}

_shundle_clean()
{
    _shundle_aux_options
    _shundle_clean__array_tmp="${SHUNDLE_OPTIONS}"
    while [ "${_shundle_clean__array_tmp}" ]; do
        _shundle_clean__element="${_shundle_clean__array_tmp%%,*}"
        _shundle_clean__element="${_shundle_clean__element##*/}"
        _shundle_clean__array="${_shundle_clean__array}${_shundle_clean__element%.*},"
        [ X"${_shundle_clean__array_tmp}" = X"${_shundle_clean__element}" ] &&\
            ${_shundle_clean__array_tmp}='' || _shundle_clean__array_tmp="${_shundle_clean__array_tmp#*,}"
    done

    for plugin in "${SHUNDLE_HOME}"/bundle/*; do
        _shundle_clean__bplugin="${plugin##*/}"
        _shundle_aux_loaded "${_shundle_clean__array}" "${_shundle_clean__bplugin}" && continue #delete only commented plugins
        _shundle_remove "${_shundle_clean__bplugin}"
    done
}

_shundle_list()
{
    _shundle_list_printf()
    {
        printf "   %b%s%b%s\\n" "${_BIN_SHUNDLE_ENV_GREEN}" "$(printf "%s" "${1}" |  cut -d" " -f1)" \
            "${_BIN_SHUNDLE_ENV_NORMAL}" "$(printf "%s" "${1}" |  cut -d" " -f2-)"
    }

    #printf "%b%s%b\\n" "${_BIN_SHUNDLE_ENV_BLUE}" "Plugins:" "${_BIN_SHUNDLE_ENV_NORMAL}"

    for _shundle_list__plugin in "${SHUNDLE_HOME}"/bundle/*; do
        _shundle_list__bplugin="${_shundle_list__plugin##*/}"
        if _shundle_aux_loaded ${SHUNDLE_PLUGINS} ${_shundle_list__bplugin}; then
            printf "%b%s%b\\n" "${_BIN_SHUNDLE_ENV_RED}" "${_shundle_list__bplugin}" "${_BIN_SHUNDLE_ENV_NORMAL}"
        else
            printf "%b%s%b\\n" "${_BIN_SHUNDLE_ENV_YELLOW}" "${_shundle_list__bplugin}" "${_BIN_SHUNDLE_ENV_NORMAL}"
        fi

        if [ -d "${SHUNDLE_HOME}/bundle/${_shundle_list__bplugin}/${_shundle_list__bplugin}" ]; then
            _shundle_list__bplugin="${_shundle_list__bplugin}/${_shundle_list__bplugin}"
        fi

        if [ -f "${_shundle_list__plugin}/${_shundle_list__bplugin}" ]; then
            _shundle_list__description="$(head "${_shundle_list__plugin}/${_shundle_list__bplugin}" | sed '/[D|d]escription:/!d' | cut -d" " -f2-)"
            [ -n "${_shundle_list__description}" ] && _shundle_list_printf "${_shundle_list__description}"
            _shundle_list__home="$(head "${_shundle_list__plugin}/${_shundle_list__bplugin}" | sed '/[S|s]ource:/!d' | cut -d" " -f2-)"
            [ -n "${_shundle_list__home}" ] && _shundle_list_printf "${_shundle_list__home}"
            _shundle_list__support="$(head "${_shundle_list__plugin}/${_shundle_list__bplugin}" | sed '/[S|s]hell:/!d' | cut -d" " -f2-)"
            [ -n "${_shundle_list__support}" ] && _shundle_list_printf "${_shundle_list__support}"
        fi
    done
}

WGET="$(command -v "wget")"
[ -z "${WGET}" ] && WGET="$(command -v "curl") -O"
[ -z "${WGET}" ] && WGET="$(command -v "fetch")"

if ! _whereis git >/dev/null; then
    _die "shundle: git not found!"
elif [ -z "${WGET}" ]; then
    _die "shundle: wget|curl|fetch not found!"
fi

GIT_VERSION="$(git --version | awk '{gsub("\\.", "");print $NF;exit;}')"

if [ "${#}" -lt 1 ]; then
    _usage
else
    case "${1}" in
        #install|remove|search|update|clean|list) _shundle_$1 "$2";;
        i*) shift; _shundle_install "${@}";;
        r*) shift; _shundle_remove  "${@}";;
        s*) shift; _shundle_search  "${2}";;
        u*) _shundle_update ;;
        c*) _shundle_clean  ;;
        l*) _shundle_list   ;;
         *) _usage          ;;
    esac
fi

# vim: set ts=8 sw=4 tw=0 ft=sh :
